import numpy as np 

def generate_test():
    A = np.zeros((6, 6))
    f = [0] * len(A)
    for i in range(len(A)):
        A[i][i] = 2 + ((i - 1) / len(A)) ** 2
    
        if i == 0:
            A[i][i + 1] = -1
        elif i == (len(A) - 1):
            A[i][i - 1] = -1
        else:
           A[i][i + 1] = -1
           A[i][i - 1] = -1

        A[0][len(A) - 1] = -1
        A[len(A) - 1][0] = -1

    for i in range(6):
        f[i] = (1 + (len(A)**2) * np.sin(np.pi/len(A))) * np.sin((2 * np.pi * (i - 1)) / len(A))


    return A, f

def matrix_check(A, n ): 
    Trans_matrix = np.zeros((n,n))
    for i in range(n):          
        for j in range(n):      
            Trans_matrix[j][i] = A[i][j]
    if ((np.array_equal(A, Trans_matrix)) and np.all(np.linalg.eigvals(A) > 0)):
      return 1
    return 0

def L_Lt(A):
    n = len(A)
    if not matrix_check(A, n):
      print("worng matrix")
      exit()

    L = np.zeros((n,n))
    L[0][0] = np.sqrt(A[0][0])

    for i in range(1, n):
        L[i][0] = A[i][0] / L[0][0]
        for j in range(1, i):
            sum = 0
            for k in range(0, j):
                sum += L[i][k] * L[j][k]
            L[i][j] = (1 / L[j][j]) * (A[i][j] - sum)
        sum = 0
        for p in range(i):
            sum += L[i][p] ** 2
        L[i][i] = np.sqrt(A[i][i] - sum)
     
    Lt = np.zeros((n, n))
    for i in range(n):          
        for j in range(n):      
            Lt[j][i] = L[i][j]

    return L, Lt

def solve_L(A, f):
    n = len(A)
    x = [0] * n
    
    for i in range(n):
        sum = 0
        for k in range(i):
            sum += A[i][k] * x[k]

        x[i] = (1 / A[i][i]) * (f[i] - sum)

    return x

def solve_Lt(A, f):
    n = len(A)
    x = [0] * n

    np.seterr(divide='ignore', invalid='ignore')
    for i in reversed(range(n)):
        sum = 0
        for k in range(n - 1, i, -1):
            sum += A[i][k] * x[k]
            
        x[i] = (1 / A[i][i]) * (f[i] - sum)

    return x 

def Holetsky(A, f):
    L, Lt = L_Lt(A)
    y = solve_L(L, f)
    x = solve_Lt(Lt, y)
    return x
 
def make_matrix(n):
    A = []
    for i in range(n):          
        a =[]
        for j in range(n):      
          a.append(float(input()))
        A.append(a)

    f = []
    for i in range(n):
      f.append(float(input()))
    return A, f

def norma(A):
    sum = 0
    n = len(A)
    for i in range(n):
        sum += A[i] ** 2
    return(np.sqrt(sum))

def main():
#for test
    A, f = generate_test()
    x = Holetsky(A2, f2)
    print("Solve:")
    print(x)
    print("NumPy solve:")
    print(np.linalg.solve(A2, f2))
    print("Norma of difference:")
    print(norma(x - np.linalg.solve(A2, f2)))

if(__name__ == "__main__"):
    main()
